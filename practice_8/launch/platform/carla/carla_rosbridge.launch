<?xml version="1.0"?>
<launch>

  <!-- Map to load on startup, this should match with CARLA environments-->
  <arg name="map_name" />
  <!-- use comma separated format "x,y,z,roll,pitch,yaw" -->
  <arg name="spawn_point" />
  <!-- Module type -->
  <arg name="use_lidar"                                           default="false"/>
  <arg name="use_radar"                                           default="false"/>
  <arg name="use_gnss"                                            default="false"/>
  <arg name="use_cam"                                             default="false" />
  <!-- Load correct sensor configurations-->
  <arg if="$(eval not use_lidar and not use_radar and use_cam)"       name="objects_definition_file"    default="$(find autoware_mini)/config/carla/sensors_no_lidars_and_radars.json" />
  <arg if="$(eval not use_lidar and not use_radar and not use_cam)"   name="objects_definition_file"    default="$(find autoware_mini)/config/carla/sensors_minimal.json" />
  <arg if="$(eval (use_lidar or use_radar) and use_cam)"              name="objects_definition_file"    default="$(find autoware_mini)/config/carla/sensors.json" />
  <arg if="$(eval (use_lidar or use_radar) and not use_cam)"          name="objects_definition_file"    default="$(find autoware_mini)/config/carla/sensors_no_cam.json" />
  <!-- Carla Server parameters -->
  <arg name='host'                                                default='localhost' />
  <arg name='port'                                                default='2000' />
  <arg name='timeout'                                             default='100' />
  <arg name='fixed_delta_seconds'                                 default='0.05'/>
  
  <!--
    ########################
    ## Carla topic remaps ##
    ########################
  -->
  <remap from="/carla/ego_vehicle/base_link/rgb_view/camera_info" to="/carla/rgb_view/camera_info" />
  <remap from="/carla/ego_vehicle/base_link/rgb_view/image" to="/carla/rgb_view/image_raw" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center" to="/lidar_center/pointcloud" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center/lidar_front/os_sensor" to="/lidar_front/points" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center/camera_fl/camera_info" to="/camera_fl/camera_info" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center/camera_fr/camera_info" to="/camera_fr/camera_info" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center/camera_fl/image" to="/camera_fl/image_raw" />
  <remap from="/carla/ego_vehicle/base_link/lidar_center/camera_fr/image" to="/camera_fr/image_raw" />
  <remap from="/carla/ego_vehicle/base_link/gnss_forward" to="/gps/fix_forward" />
  <remap from="/carla/ego_vehicle/base_link/gnss" to="/gps/fix" />
  <remap from="/carla/ego_vehicle/base_link/imu" to="/gps/imu" />
  <remap from="/carla/ego_vehicle/odometry" to="/carla/odometry" />
  <remap from="/carla/ego_vehicle/objects" to="/carla/ground_truth_objects" />
  <remap from="/carla/ego_vehicle/goal" to="/move_base_simple/goal" />
  <remap from="/initialpose" to="/initialpose_sim" />

  <!-- ====================================================================================================== -->

  <!--
    #####################
    ## Carla TF remaps ##
    #####################
  -->

  <node pkg='tf' type='static_transform_publisher' name='base_link_basename' args='0 0 0 0 0 0 /ego_vehicle/base_link /base_link 50' />
  <node pkg='tf' type='static_transform_publisher' name='base_footprint_basename' args='0 0 0 0 0 0 /ego_vehicle/base_link/base_footprint /base_footprint 50' />
  <node pkg='tf' type='static_transform_publisher' name='lidar_center_basename' args='0 0 0 0 0 0 /ego_vehicle/base_link/lidar_center /lidar_center 50' />
  <node pkg='tf' type='static_transform_publisher' name='lidar_front_basename' args='0 0 0 0 0 0 /ego_vehicle/base_link/lidar_center/lidar_front/os_sensor /lidar_front/os_sensor 50' />

  <!-- ====================================================================================================== -->

  <!--
    ######################
    ## CARLA ROS bridge ##
    ######################
  -->
  <group>
    <include file="$(find carla_ros_bridge)/launch/carla_ros_bridge.launch">
      <!-- If using tartu map then run Tartu environment of Carla -->
      <arg name='town'                value="$(eval 'Tartu' if map_name == 'tartu_demo' else map_name)"/>
      <arg name='host'                value='$(arg host)' />
      <arg name='port'                value='$(arg port)' />
      <arg name='timeout'             value='$(arg timeout)' />
      <arg name='fixed_delta_seconds' value='$(arg fixed_delta_seconds)' />
    </include>
  </group>

  <!-- ====================================================================================================== -->

  <!--
    #######################
    ## CARLA Ego vehicle ##
    #######################
  -->
  <include file="$(find carla_spawn_objects)/launch/carla_example_ego_vehicle.launch">
  <!-- The ego vehicle, that will be controlled by an agent (e.g. carla_ad_agent) -->
    <arg name="objects_definition_file"               value='$(arg objects_definition_file)' />
    <arg name="spawn_point_ego_vehicle"               value="$(arg spawn_point)" />
    <arg name="spawn_sensors_only"                    value="false" />
  </include>

  <!-- ====================================================================================================== -->

  <!--
    ######################################
    ## CARLA Autoware Bridge Misc Nodes ##
    ######################################
  -->  

  <!-- If using gnss localization then change child_frame to ego_vehicle and run carla_to_novatel msgs converter -->
  <group if="$(eval use_gnss)">
    <param  name="/localization/novatel_oem7_localizer/child_frame" value="ego_vehicle" />
    <node pkg='autoware_mini' type='carla_novatel_driver.py' name='carla_novatel_driver' output='screen' required="true" />
  </group>
  
  <!-- ====================================================================================================== -->

</launch>